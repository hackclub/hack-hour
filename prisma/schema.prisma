generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// the user... duh
model User {
  id String @id

  lifetimeMinutes Int

  apiKey String @unique

  slackUser SlackUser?
  sessions  Session[]
  goals     Goal[]

  /// [UserMetadata]
  metadata Json

  log          Log[]
  // transactions Transaction[]
  scrapbooks   Scrapbook[]
}

// slack data of the user
model SlackUser {
  slackId String @id
  user    User   @relation(fields: [userId], references: [id])
  userId  String @unique
}

// tracks the user's hour (/hack)
model Session {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  id String @id

  messageTs String
  controlTs String

  createdAt         DateTime @default(now())
  time              Int
  elapsed           Int
  elapsedSincePause Int

  completed Boolean
  cancelled Boolean
  paused    Boolean

  goal   Goal   @relation(fields: [goalId], references: [id])
  goalId String

  evidence Boolean @default(false)
  logs     Log[]

  // transaction Transaction? 

  scrapbook Scrapbook? @relation(fields: [scrapbookId], references: [internalId])
  scrapbookId String? @unique

  /// [SessionMetadata]
  metadata Json
}

// Categorizes the user's sessions (group)
model Goal {
  id     String @id
  user   User   @relation(fields: [userId], references: [id])
  userId String

  name        String
  description String @default("")

  minutes   Int      @default(0)
  createdAt DateTime @default(now())

  default Boolean @default(false)

  completed Boolean @default(false)

  sessions Session[]

  metadata Json
}

// Ship posts & etc. - anything that counts as a banked hour
model Log {
  id     String @id
  user   User   @relation(fields: [userId], references: [id])
  userId String

  approved Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions Session[]

  /// [LogData]
  data Json
}

// A grouping of sessions associated with a scrapbook post
model Scrapbook {
  internalId String @id
  ts String
  channel String

  flowTs String @unique
  flowChannel String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  /// [ScrapbookMetadata]
  data Json

  createdAt DateTime @default(now())

  sessions Session[]
}